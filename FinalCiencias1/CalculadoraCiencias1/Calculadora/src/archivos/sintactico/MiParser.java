
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package archivos.sintactico;

import archivos.ast.Base.Expresiones.Constantes.ConstanteEntera;
import archivos.ast.Base.Expresiones.Constantes.ConstanteFloat;
import archivos.ast.Base.Expresiones.Expresion;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Division;
import archivos.ast.Base.Expresiones.Operaciones.binarias.OperacionBinaria;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Multiplicacion;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Resta;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Suma;
import archivos.ast.Base.Expresiones.Operaciones.unarias.OperacionUnaria;
import archivos.ast.Base.Expresiones.Operaciones.unarias.MenosUnario;
import archivos.ast.Base.Expresiones.funcionesAdicionales.*;
import archivos.ast.Base.Nodo;
import archivos.ast.Base.Resultado;
import java_cup.runtime.Symbol;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\005\004\000" +
    "\002\005\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\005\000\002\004\003\000\002\007\006\000\002\007" +
    "\010\000\002\007\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\020\006\017\011\016\014\004\015\020\016" +
    "\005\017\010\020\012\001\002\000\020\002\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\001\002\000" +
    "\004\011\045\001\002\000\020\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\027\010\030\012\ufffd\001\002\000\004\002" +
    "\044\001\002\000\004\011\037\001\002\000\020\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\001" +
    "\002\000\004\011\034\001\002\000\010\002\000\004\025" +
    "\006\023\001\002\000\020\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\012\ufff8\001\002\000\020\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\001" +
    "\002\000\020\006\017\011\016\014\004\015\020\016\005" +
    "\017\010\020\012\001\002\000\020\006\017\011\016\014" +
    "\004\015\020\016\005\017\010\020\012\001\002\000\020" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012" +
    "\ufff6\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\012\ufff9\001\002\000\010\004\025\006" +
    "\023\012\024\001\002\000\020\006\017\011\016\014\004" +
    "\015\020\016\005\017\010\020\012\001\002\000\020\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5" +
    "\001\002\000\020\006\017\011\016\014\004\015\020\016" +
    "\005\017\010\020\012\001\002\000\020\002\uffff\004\uffff" +
    "\005\uffff\006\uffff\007\027\010\030\012\uffff\001\002\000" +
    "\020\006\017\011\016\014\004\015\020\016\005\017\010" +
    "\020\012\001\002\000\020\006\017\011\016\014\004\015" +
    "\020\016\005\017\010\020\012\001\002\000\020\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\001" +
    "\002\000\020\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\012\ufffc\001\002\000\020\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\027\010\030\012\ufffe\001\002\000\020" +
    "\006\017\011\016\014\004\015\020\016\005\017\010\020" +
    "\012\001\002\000\010\004\025\006\023\012\036\001\002" +
    "\000\020\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\012\ufff3\001\002\000\020\006\017\011\016\014\004" +
    "\015\020\016\005\017\010\020\012\001\002\000\010\004" +
    "\025\005\041\006\023\001\002\000\020\006\017\011\016" +
    "\014\004\015\020\016\005\017\010\020\012\001\002\000" +
    "\010\004\025\006\023\012\043\001\002\000\020\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\001" +
    "\002\000\004\002\001\001\002\000\020\006\017\011\016" +
    "\014\004\015\020\016\005\017\010\020\012\001\002\000" +
    "\010\004\025\005\047\006\023\001\002\000\020\006\017" +
    "\011\016\014\004\015\020\016\005\017\010\020\012\001" +
    "\002\000\010\004\025\006\023\012\051\001\002\000\020" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012" +
    "\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\016\002\006\003\012\004\013\005\010\006" +
    "\005\007\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\021\004\013\005" +
    "\010\006\005\007\014\001\001\000\010\004\013\005\020" +
    "\007\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\013\005\010\006\032\007\014" +
    "\001\001\000\002\001\001\000\012\004\013\005\010\006" +
    "\025\007\014\001\001\000\002\001\001\000\010\004\013" +
    "\005\031\007\014\001\001\000\010\004\013\005\030\007" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\034\004\013\005\010\006\005\007" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\037\004\013\005\010\006\005\007\014\001\001\000" +
    "\002\001\001\000\014\003\041\004\013\005\010\006\005" +
    "\007\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\045\004\013\005\010\006\005" +
    "\007\014\001\001\000\002\001\001\000\014\003\047\004" +
    "\013\005\010\006\005\007\014\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        concat_rules("Error en la columna "+ (s.right+1)+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );}

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            throw new Exception("Error en la columna "+ (s.right+1) +
            ". Valor simbolo '"+s.value+"' . Simbolo n° "+s.sym+ "." ); }

    public String reglas = "";

    public void concat_rules(String regla){
        reglas += regla + "\n";
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {



  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= resultado EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Resultado start_val = (Resultado)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // resultado ::= expresion 
            {
              Resultado RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		  concat_rules("REGLA 0: resultado --> expresion" + "\n  --> " + e.darResultado());
    RESULT = new  Resultado("Resultado",e);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("resultado",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresion ::= expresion SUMA termino 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 1.1: expresion --> expresion SUMA termino " + "\n  --> " + e1.darResultado() +" + "+ e2.darResultado());
        RESULT = new Suma("Suma",e1,e2);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= expresion RESTA termino 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 1.2: expresion --> expresion RESTA termino " + "\n  --> " + e1.darResultado() + " - " + e2.darResultado());
        RESULT = new Resta("Resta",e1,e2);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 1.3: expresion --> termino " + "\n  --> " + t.darResultado());
        RESULT = t ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // termino ::= termino MULT menos_unario 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.1: termino --> termino MULT menor_unario " + "\n  --> " + t.darResultado() + " * " + mu.darResultado());
        RESULT = new Multiplicacion("Multiplicacion",t,mu);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // termino ::= termino DIV menos_unario 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2: termino --> termino DIV menor_unario " + "\n  --> " + t.darResultado() + " / " + mu.darResultado());
        RESULT = new Division("Division",t,mu);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // termino ::= menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.3: termino --> menor_unario " + "\n  --> " + mu.darResultado());
        RESULT = mu;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // menos_unario ::= RESTA menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 3.1: menos_unario --> - menor_unario " + "\n  --> " + "-" +mu.darResultado());
        RESULT = new MenosUnario("MenosUnario",mu);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // menos_unario ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 3.2: menos_unario --> factor " + "\n  --> " + f.darResultado());
        RESULT = f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // factor ::= INT 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 4.1: factor --> INT " + "\n  --> " + i);
        RESULT = new ConstanteEntera(i,"ConstanteEntera");
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // factor ::= FLOAT 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 4.2: factor --> FLOAT " + "\n  --> " + f);
        RESULT = new ConstanteFloat(f,"ConstanteFloat");
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // factor ::= PARENTESISO expresion PARENTESISC 
            {
              Expresion RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        concat_rules("REGLA 4.3: factor --> PARENTESISO expresion PARENTESISC " + "\n  --> " + " ( " + eo.darResultado() + " ) ");
        RESULT = eo;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // factor ::= funcionesAdicionales 
            {
              Expresion RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion fa = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 4.4: factor --> funcionesAdicionales " + "\n  --> "  + fa.darResultado());
        RESULT = fa;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcionesAdicionales ::= ABS PARENTESISO expresion PARENTESISC 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 5.1: funcionesAdicionales --> ABS ( expresion )  " + "\n  --> "+"ABS( "+e.darResultado()+")");
            RESULT = new ABS("ABS",e);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcionesAdicionales",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcionesAdicionales ::= POTENCIA PARENTESISO expresion COMA expresion PARENTESISC 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        concat_rules("REGLA 5.2: funcionesAdicionales --> POTENCIA ( expresion, expresion )  "
                        + "\n  --> "+"POTENCIA("+e1.darResultado()+","+e2.darResultado()+")");
        RESULT = new POTENCIA("Potencia",e1,e2);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcionesAdicionales",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcionesAdicionales ::= RAIZ PARENTESISO expresion COMA expresion PARENTESISC 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        concat_rules("REGLA 5.3: funcionesAdicionales --> POTENCIA ( expresion, expresion )  "
                    + "\n  --> "+"POTENCIA("+e1.darResultado()+","+e2.darResultado()+")");
        RESULT = new RAIZ("Raiz",e1,e2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcionesAdicionales",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
